{{ autoGeneratedDelcare }}
{{ contentHeader }}
#include "{{ headerFile }}"
#include <string>
#include "xiyue_string_file_writer.h"
#include "kyuubi_std_string_dumper.h"
#include "kyuubi_runtime_exception.h"

using namespace std;
using namespace xiyue;
using namespace kyuubi;
{% if namespace %}
using namespace {{ namespace }};
{% endif %}

/*
	VM Instructions
*/
static VmInstruction g_instructions[] = {
{% for ins in instructions %}
	{ {{ ins.directive }}, {{ ins.arg1 }}, L"{{ ins.arg2 | escapeCpp }}"_cs }{% if !loop.isLastItem %},{% endif %}
{% endfor %}
};

/*
	Global Virtual Machine
*/
VM {{ name | camelCase(true) }}::m_vm(g_instructions);

/*
	Dump functions
*/
ConstString {{ name | camelCase(true) }}::dumpToString(JsonObject data)
{
	StdStringDumper dumper;
	m_vm.dump(&data, &dumper);
	return dumper.getString().c_str();
}

void {{ name | camelCase(true) }}::dumpToFile(JsonObject data, ConstString fileName)
{
	ConstString result = dumpToString(data);

	StringFileWriter writer(result.length());
	if (!writer.open(fileName))
		throw RuntimeException(0, XIYUE_CONST_STRING(L"Can not write string to file `%s`.", fileName.cstr()));

	writer.writeString(result);
	writer.close();
}

{{ contentFooter }}